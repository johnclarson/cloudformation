{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "SIGMA AWS CloudFormation Template IPA Master/Slave on CentOS 7",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Default": "jlarson-uc2s",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "MasterHostName": {
      "Description": "Name of IPA master host",
      "Default": "c-ipa-3",
      "Type": "String"
    },
    "SlaveHostName": {
      "Description": "Name of IPA master host",
      "Default": "c-ipa-4",
      "Type": "String"
    },
    "DomainName": {
      "Description": "Domain name for IPA host",
      "Default": "sigma.test",
      "Type": "String"
    },
    "RealmName": {
      "Description": "Realm name for IPA host",
      "Default": "SIGMA.TEST",
      "Type": "String",
      "AllowedPattern": "[A-Z\\.]+",
      "ConstraintDescription": "must contain only upper case alphanumeric characters and a dot separator."
    },
    "IPAAdminPassword": {
      "NoEcho": "true",
      "Default": "IpaAdmin2017",
      "Description": "Password for IPA admin user",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DNSServer": {
      "Description": "DNS server for accessing yum repos and cfn-init",
      "Default": "172.24.0.2",
      "Type": "String"
    },
    "DNSForwarder": {
      "Description": "Forward DNS server",
      "Default": "8.26.56.26",
      "Type": "String"
    },
    "VPCid": {
      "Description": "VPC where the IPA servers should be built",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "must be the name of a valid VPC"
    },
    "MasterSubnet": {
      "Description": "Subnet ID to build the IPA master instance in",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be the name of a valid subnet"
    },
    "SlaveSubnet": {
      "Description": "Subnet ID to build the IPA slave instance in",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be the name of a valid subnet"
    },
    "CFNRpm": {
      "Default": "aws-cfn-bootstrap.rpm",
      "Description": "RPM name for AWS CFN bootstrap found in ContentS3Bucket",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z0-9\\-\\.]+",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters and hyphens."
    },
      "ContentS3Bucket": {
      "Default": "sigma-build",
      "Description": "S3 bucket for content retrieval",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z0-9\\-\\.]+",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters and hyphens."
    },
    "CentOSBaseRepoURL": {
      "Default": "http://mirror.centos.org/centos/7/os/x86_64/",
      "Description": "URL of base Centos yum repo",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },
    "CentOSUpdatesRepoURL": {
      "Default": "http://mirror.centos.org/centos/7/updates/x86_64/",
      "Description": "URL of updates Centos yum repo",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },
    "EPELRepoURL": {
      "Default": "https://dl.fedoraproject.org/pub/epel/7/x86_64/",
      "Description": "URL of EPEL yum repo",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64"
    },
    "AMI": {
      "Default": "ami-61967b77",
      "Description": "CentOS 7 AMI to use for IPA servers",
      "Type": "String",
      "MinLength": "12",
      "MaxLength": "12",
      "AllowedPattern": "ami-[a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with ami- and contain only alphanumeric characters."
    },
    "MasterInstanceType": {
      "Description": "IPA master server EC2 instance type",
      "Type": "String",
      "Default": "t2.large",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SlaveInstanceType": {
      "Description": "IPA master server EC2 instance type",
      "Type": "String",
      "Default": "t2.small",
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Resources": {
    "IPAInstanceIAMRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ec2.amazonaws.com"
              ]
            },
            "Action": [
              "sts:AssumeRole"
            ]
          }
        ]
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "buildS3access",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "s3:ListAllMyBuckets",
                "Resource": "arn:aws:s3:::*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:ListBucket",
                  "s3:GetBucketLocation"
                ],
                "Resource": { "Fn::Join" : [
                   "", [ "arn:aws:s3:::", { "Ref": "ContentS3Bucket" } ]
                   ] 
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:DeleteObject"
                ],
                "Resource": { "Fn::Join" : [
                   "", [ "arn:aws:s3:::", { "Ref": "ContentS3Bucket" }, "/*" ]
                   ] 
                }
              }
            ]
          }
        }
      ]
    }
    },
    "IPAInstanceIAMProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IPAInstanceIAMRole"
          }
        ]
      }
    },
    "IPAMasterInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [
              "Install",
              "Configure",
              "Run"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "ipa-server": [],
                "ipa-server-dns": []
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource IPAMasterInstance ",
                      "         --configsets InstallAndRun ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "cfn-hup": {
                "enabled": "true",
                "ensureRunning": "true",
                "files": [
                  "/etc/cfn/cfn-hup.conf",
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                ]
              }
            }
          },
          "Configure": {
            "commands": {
              "01_ipa_master_install": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "IPADDR=`/usr/bin/curl -s http://169.254.169.254/2016-06-30/meta-data/local-ipv4`; ",
                      "/usr/sbin/ipa-server-install -a ",
                      {
                        "Ref": "IPAAdminPassword"
                      },
                      " --hostname=",
                      {
                        "Ref": "MasterHostName"
                      },
                      ".",
                      {
                        "Ref": "DomainName"
                      },
                      " -n ",
                      {
                        "Ref": "DomainName"
                      },
                      " -p ",
                      {
                        "Ref": "IPAAdminPassword"
                      },
                      " -r ",
                      {
                        "Ref": "RealmName"
                      },
                      " --forwarder=",
                      {
                        "Ref": "DNSForwarder"
                      },
                      " --setup-dns --ip-address $IPADDR -U"
                    ]
                  ]
                }
              },
              "02_create_reverse_zone_and_ptr_record": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "IPADDR=`/usr/bin/curl -s http://169.254.169.254/2016-06-30/meta-data/local-ipv4`; ",   
                      "rz3=$(echo $IPADDR | cut -f1 -d.); ",
                      "rz2=$(echo $IPADDR | cut -f2 -d.); ",
                      "rz1=$(echo $IPADDR | cut -f3 -d.); ",
                      "ptr=$(echo $IPADDR | cut -f4 -d.); ",
                      "dc1=$(echo ",
                      {
                        "Ref": "DomainName"
                      },
                      " | cut -f1 -d.); ",
                      "dc2=$(echo ",
                      {
                        "Ref": "DomainName"
                      },
                      " | cut -f2 -d.); ",
                      "ipa-getkeytab -D 'cn=Directory Manager' -w ",
                      {
                        "Ref": "IPAAdminPassword"
                      },
                      " -p admin@",
                      {
                        "Ref": "RealmName"
                      },
                      " -k /root/admin.keytab; ",
                      "chmod 400 /root/admin.keytab; ",
                      "kinit -kt /root/admin.keytab admin@",
                      {
                        "Ref": "RealmName"
                      },
                      "; ",
                      "echo | ipa  dnszone-add --name-from-ip=$IPADDR --allow-sync-ptr=true --dynamic-update=true; ",
                      "ipa dnszone-mod ",
                      {
                        "Ref": "DomainName"
                      },
                      " --allow-sync-ptr=True; ",
                      "ipa dnsrecord-add $rz1.$rz2.$rz3.in-addr.arpa. $ptr --ptr-hostname=",
                      {
                        "Ref": "MasterHostName"
                      },
                      ".",
                      { 
                        "Ref": "DomainName"
                      },
                      ". ;",
                      "rm /root/admin.keytab; ",
                      "kdestroy; ",
                      "ldappasswd  -D 'cn=directory manager' -w ",
                      {
                        "Ref": "IPAAdminPassword"
                      },
                      " -s ",
                      {
                        "Ref": "IPAAdminPassword"
                      },
                      " -S uid=admin,cn=users,cn=accounts,dc=$dc1,dc=$dc2"
                    ] 
                  ]
                }
              }
            }
          },
          "Run": {
            "services": {
              "ipa": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "AMI"
        },
        "InstanceType": {
          "Ref": "MasterInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "IPA Master (TEST)"
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IPAInstanceIAMProfile"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "True",
            "DeleteOnTermination": "True",
            "SubnetId": {
              "Ref": "MasterSubnet"
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "IPASecurityGroup"
              }
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "hostname ",
                {
                  "Ref": "MasterHostName"
                },
                ".",
                {
                  "Ref": "DomainName"
                },
                "\n",
                "rm -rf /etc/resolv.conf\n",
                "echo \"domain ",
                {
                  "Ref": "DomainName"
                },
                "\n",
                "search ",
                {
                  "Ref": "DomainName"
                },
                "\n",
                "nameserver ",
                {
                  "Ref": "DNSServer"
                },
                "\" >> /etc/resolv.conf\n",
                "/bin/sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux\n",
                "echo \"",
                {
                  "Ref": "MasterHostName"
                },
                ".",
                {
                  "Ref": "DomainName"
                },
                "\" > /etc/hostname\n",
                "echo \"HOSTNAME=",
                {
                  "Ref": "MasterHostName"
                },
                ".",
                {
                  "Ref": "DomainName"
                },
                "\" >> /etc/sysconfig/network\n",
                "echo \"preserve_hostname: true\" >> /etc/cloud/cloud.cfg\n",
                "# Set up yum repos\n",
                "rm -rf /etc/yum.repos.d/*\n",
                "cat << EOF > /etc/yum.repos.d/CentOS.repo\n",
                "[CentOSBase]\n",
                "name=CentOSBase\n",
                "baseurl=",
                {
                  "Ref": "CentOSBaseRepoURL"
                },
                "\n",
                "enabled=1\n",
                "gpgcheck=0\n",
                "\n",
                "[CentOSUpdates]\n",
                "name=CentOSUpdates\n",
                "baseurl=",
                {
                  "Ref": "CentOSUpdatesRepoURL"
                },
                "\n",
                "enabled=1\n",
                "gpgcheck=0\n",
                "EOF\n",
                "cat << EOF > /etc/yum.repos.d/EPEL.repo\n",
                "[EPEL]\n",
                "name=EPEL\n",
                "baseurl=",
                {
                  "Ref": "EPELRepoURL"
                },
                "\n",
                "enabled=1\n",
                "gpgcheck=0\n",
                "EOF\n",
                "yum -y install pystache\n",
                "yum -y install python-daemon\n",
                "yum -y install awscli\n",
                "yum -y update\n",
                "/bin/aws s3 cp s3://",
                {
                  "Ref": "ContentS3Bucket"
                },
                "/",
                {
                  "Ref": "CFNRpm"
                },
                " /tmp\n",
                "rpm -i /tmp/",
                {
                  "Ref": "CFNRpm"
                },
                "\n",
                "/sbin/chkconfig --add cfn-hup\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource IPAMasterInstance ",
                "         --configsets InstallAndRun ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource IPAMasterInstance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT20M"
        }
      }
    },
    "IPASlaveInstance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [
              "Install",
              "Configure",
              "Run"
            ]
          },
          "Install": {
            "packages": {
              "yum": {
                "ipa-server": [],
                "ipa-server-dns": []
              }
            },
            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource IPASlaveInstance ",
                      "         --configsets InstallAndRun ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "cfn-hup": {
                "enabled": "true",
                "ensureRunning": "true",
                "files": [
                  "/etc/cfn/cfn-hup.conf",
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                ]
              }
            }
          },
          "Configure": {
            "commands": {
              "01_fix_dns": {
                "command": {
                  "Fn::Join": [
                  "",
                  [
                    "",
                    "rm /etc/resolv.conf;",
                    " echo \"search ",
                    {
                      "Ref": "DomainName"
                    },
                    "\" >> /etc/resolv.conf;",
                    " echo \"nameserver ",
                    {
                       "Fn::GetAtt": [
                         "IPAMasterInstance",
                         "PrivateIp"
                       ]
                    },
                    "\" >> /etc/resolv.conf"
                    ]
                  ]
                }
              },
              "02_install_ipa_client": {
                "command": {
                  "Fn::Join": [
                  "",
                  [
                    "",
                    "rm /etc/ipa/ca.crt;",
                    " ipa-client-install -p admin -w ",
                    {
                      "Ref": "IPAAdminPassword"
                    },
                    " --enable-dns-updates --server=",
                    {
                      "Ref": "MasterHostName"
                    },
                    ".",
                    {
                      "Ref": "DomainName"
                    },
                    " --domain=",
                    {
                      "Ref": "DomainName"
                    },
                    " --realm=",
                    {
                      "Ref": "RealmName"
                    },
                    " --no-dns-sshfp -U --force"
                    ]
                  ]
                }
              },
              "03_ipa_replica_install": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/sbin/ipa-replica-install --setup-ca --setup-dns --no-host-dns --forwarder=",
                      {
                        "Ref": "DNSForwarder"
                      },
                      " -w ",
                      {
                        "Ref": "IPAAdminPassword"
                      },
                      " --skip-conncheck"
                    ]
                  ]
                }
              }   
            }
          },
          "Run": {
            "services": {
              "ipa": {
                "enabled": "true",
                "ensureRunning": "true"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Ref": "AMI"
        },
        "InstanceType": {
          "Ref": "SlaveInstanceType"
        },
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : "IPA Slave (TEST)"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "IamInstanceProfile": {
          "Ref": "IPAInstanceIAMProfile"
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "True",
            "DeleteOnTermination": "True",
            "SubnetId": {
              "Ref": "SlaveSubnet"
            },
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "IPASecurityGroup"
              }
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "hostname ",
                {
                  "Ref": "SlaveHostName"
                },
                ".",
                {
                  "Ref": "DomainName"
                },
                "\n",
                "rm -rf /etc/resolv.conf\n",
                "echo \"domain ",
                {
                  "Ref": "DomainName"
                },
                "\n",
                "search ",
                {
                  "Ref": "DomainName"
                },
                "\n",
                "nameserver ",
                {
                  "Ref": "DNSServer"
                },
                "\" >> /etc/resolv.conf\n",
                "/bin/sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/sysconfig/selinux\n",
                "echo \"",
                {
                  "Ref": "SlaveHostName"
                },
                ".",
                {
                  "Ref": "DomainName"
                },
                "\" > /etc/hostname\n",
                "echo \"HOSTNAME=",
                {
                  "Ref": "SlaveHostName"
                },
                ".",
                {
                  "Ref": "DomainName"
                },
                "\" >> /etc/sysconfig/network\n",
                "echo \"preserve_hostname: true\" >> /etc/cloud/cloud.cfg\n",
                "# Set up yum repos\n",
                "rm -rf /etc/yum.repos.d/*\n",
                "cat << EOF > /etc/yum.repos.d/CentOS.repo\n",
                "[CentOSBase]\n",
                "name=CentOSBase\n",
                "baseurl=",
                {
                  "Ref": "CentOSBaseRepoURL"
                },
                "\n",
                "enabled=1\n",
                "gpgcheck=0\n",
                "\n",
                "[CentOSUpdates]\n",
                "name=CentOSUpdates\n",
                "baseurl=",
                {
                  "Ref": "CentOSUpdatesRepoURL"
                },
                "\n",
                "enabled=1\n",
                "gpgcheck=0\n",
                "EOF\n",
                "cat << EOF > /etc/yum.repos.d/EPEL.repo\n",
                "[EPEL]\n",
                "name=EPEL\n",
                "baseurl=",
                {
                  "Ref": "EPELRepoURL"
                },
                "\n",
                "enabled=1\n",
                "gpgcheck=0\n",
                "EOF\n",
                "yum -y install pystache\n",
                "yum -y install python-daemon\n",
                "yum -y install awscli\n",
                "/bin/aws s3 cp s3://",
                {
                  "Ref": "ContentS3Bucket"
                },
                "/",
                {
                  "Ref": "CFNRpm"
                },
                " /tmp\n",
                "rpm -i /tmp/",
                {
                  "Ref": "CFNRpm"
                },
                "\n",
                "/sbin/chkconfig --add cfn-hup\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource IPASlaveInstance ",
                "         --configsets InstallAndRun ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource IPASlaveInstance ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT20M"
        }
      }
    }, 
    "IPASecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable IPA ports",
        "VpcId": {
          "Ref": "VPCid"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "53",
            "ToPort": "53",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "636",
            "ToPort": "636",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "389",
            "ToPort": "389",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "88",
            "ToPort": "88",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "464",
            "ToPort": "464",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "88",
            "ToPort": "88",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "464",
            "ToPort": "464",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7389",
            "ToPort": "7389",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": "123",
            "ToPort": "123",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    }
  }
}
